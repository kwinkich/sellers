import { useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation, useNavigate } from "react-router-dom";
import { AuthAPI, type AuthResponse } from "@/entities";
import { updateAuthToken, clearAllTokens } from "@/shared/lib/getAuthToken";

export type UserAppRole = "CLIENT" | "ADMIN" | "MOP";

interface UseAppInitReturn {
  isLoading: boolean;
  isError: boolean;
  error: Error | null;
  userData: AuthResponse["user"] | null;
}

export const useAppInit = (): UseAppInitReturn => {
  const navigate = useNavigate();
  const loc = useLocation();
  const hasToken = !!localStorage.getItem("accessToken");

  const refreshQ = useQuery({
    queryKey: ["auth", "refresh"],
    queryFn: AuthAPI.refreshTelegram,
    enabled: hasToken,
    retry: 0,
    staleTime: Infinity,
  });

  const authQ = useQuery({
    queryKey: ["auth", "telegram"],
    queryFn: AuthAPI.authTelegram,
    enabled: !hasToken, // –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ Telegram —É–ø–∞–¥—ë—Ç —Å—Ä–∞–∑—É ‚Äî –∏ —ç—Ç–æ –æ–∫
    retry: 0,
    staleTime: Infinity,
  });

  const data = refreshQ.data ?? authQ.data;
  // –û—à–∏–±–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ auth —Ç–æ–∂–µ —É–ø–∞–ª (refresh –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –∫—É–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
  const error = (authQ.error as Error) ?? null;
  const isLoading = refreshQ.isLoading || authQ.isLoading;

  // Fallback: –µ—Å–ª–∏ refresh —É–ø–∞–ª —Å 401, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∫–ª—é—á–∏—Ç—å authTelegram
  useEffect(() => {
    if (refreshQ.error && !authQ.isFetched && !authQ.data) {
      console.log("üîÑ useAppInit: Refresh —É–ø–∞–ª, –ø—Ä–æ–±—É–µ–º auth");
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      clearAllTokens();
      authQ.refetch();
    }
  }, [refreshQ.error, authQ.isFetched, authQ.data, authQ]);

  // –°–±—Ä–æ—Å –±–∏—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ auth —Ç–æ–∂–µ —É–ø–∞–ª
  useEffect(() => {
    if (refreshQ.error && authQ.error) {
      console.log("üßπ useAppInit: –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      clearAllTokens();
    }
  }, [refreshQ.error, authQ.error]);

  // –ø–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç ‚Äî –æ–¥–∏–Ω —Ä–∞–∑, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (!data?.data) return;
    const { accessToken, user } = data.data;
    updateAuthToken(accessToken);

    // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º—ã –Ω–∞ –∫–æ—Ä–Ω–µ, –ª–∏–±–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å —è–≤–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —Ä–æ–ª—å—é
    const target = routeByRole(user.role as UserAppRole);
    if (shouldRedirect(loc.pathname, target)) {
      navigate(target, { replace: true });
    }
  }, [data, navigate, loc.pathname]);

  return {
    isLoading,
    isError: !!error,
    error,
    userData: data?.data?.user ?? null,
  };
};

function routeByRole(role: UserAppRole) {
  return role === "CLIENT"
    ? "/client/home"
    : role === "ADMIN"
    ? "/admin/home"
    : "/mop/home";
}

function shouldRedirect(current: string, target: string) {
  // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º —Å –∫–æ—Ä–Ω—è
  if (current === "/") {
    return true;
  }

  // –ù–ï —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º —Å –æ–±—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (practice, evaluation)
  if (current.startsWith("/practice") || current.startsWith("/evaluation")) {
    return false;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "/admin" –∏–∑ "/admin/home")
  const targetBase = target.split("/")[1];
  const currentBase = current.split("/")[1];

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–µ - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
  if (currentBase && currentBase !== targetBase) {
    return true;
  }

  // –ï—Å–ª–∏ —É–∂–µ –Ω–∞ –Ω—É–∂–Ω–æ–π –≤–µ—Ç–∫–µ ‚Äî –Ω–µ –¥—ë—Ä–≥–∞–µ–º
  if (current.startsWith(target)) {
    return false;
  }

  return false;
}
